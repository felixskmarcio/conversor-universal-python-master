name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  # Backend testing and linting
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y poppler-utils libmagic1 libmagic-dev pandoc

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest pytest-cov safety bandit black isort flake8 mypy

    - name: Run security checks
      run: |
        # Check for known vulnerabilities
        safety check --json
        
        # Static security analysis
        bandit -r backend/ -f json -o bandit-report.json || true

    - name: Run code quality checks
      run: |
        # Code formatting
        black --check backend/
        
        # Import sorting
        isort --check-only backend/
        
        # Linting
        flake8 backend/
        
        # Type checking
        mypy backend/ --ignore-missing-imports

    - name: Run tests
      env:
        FLASK_ENV: testing
        SECRET_KEY: test-secret-key
        REDIS_URL: redis://localhost:6379/0
      run: |
        cd backend
        pytest --cov=. --cov-report=xml --cov-report=html --verbose

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results
        path: |
          backend/coverage.xml
          backend/htmlcov/
          bandit-report.json

  # Frontend testing and linting
  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: |
        npm run lint
        npm run type-check

    - name: Run tests
      run: |
        npm test -- --coverage --watchAll=false

    - name: Build application
      run: npm run build

    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: |
          .next/
          coverage/

  # Docker build and security scan
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: conversor-universal:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: conversor-universal:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to staging (on main branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.CONTAINER_REGISTRY }}
        username: ${{ secrets.CONTAINER_USERNAME }}
        password: ${{ secrets.CONTAINER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.CONTAINER_REGISTRY }}/conversor-universal:latest
          ${{ secrets.CONTAINER_REGISTRY }}/conversor-universal:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to staging
      run: |
        # Add your deployment script here
        echo "Deploying to staging environment..."
        # Example: kubectl set image deployment/conversor-universal conversor-universal=${{ secrets.CONTAINER_REGISTRY }}/conversor-universal:${{ github.sha }}

  # Performance testing
  performance-test:
    runs-on: ubuntu-latest
    needs: [backend-test]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install locust

    - name: Run performance tests
      run: |
        # Start the application in background
        cd backend
        python app.py &
        APP_PID=$!
        sleep 10
        
        # Run load tests
        locust -f ../tests/performance/locustfile.py --headless -u 10 -r 2 -t 60s --host=http://localhost:5000
        
        # Cleanup
        kill $APP_PID

  # Code quality gate
  quality-gate:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - name: Download test results
      uses: actions/download-artifact@v3
      with:
        name: backend-test-results

    - name: Quality Gate
      run: |
        # Check test coverage (example: minimum 80%)
        python -c "
        import xml.etree.ElementTree as ET
        tree = ET.parse('coverage.xml')
        coverage = float(tree.getroot().get('line-rate')) * 100
        print(f'Coverage: {coverage:.2f}%')
        if coverage < 80:
            print('❌ Coverage below threshold (80%)')
            exit(1)
        else:
            print('✅ Coverage meets threshold')
        "

    - name: Comment PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let comment = '## 🔍 Quality Gate Results\n\n';
          
          // Add coverage info if available
          if (fs.existsSync('coverage.xml')) {
            comment += '✅ Tests passed\n';
            comment += '✅ Coverage meets requirements\n';
          }
          
          comment += '\n📊 Detailed reports are available in the Actions tab.';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });